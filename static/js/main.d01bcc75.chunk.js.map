{"version":3,"sources":["components/ubdcalTemplate.js","components/Form.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["ubdcalTemplate","_ref","form","result","react_default","a","createElement","className","Form","value","onClick","handleKeyPress","handleChange","type","onChange","onKeyPress","placeholder","Result","App","state","input","resultNum","e","_this","setState","target","transNum","resNum","toFixed","key","this","src_components_ubdcalTemplate","src_components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAwBeA,SArBQ,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,OAC3B,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,yCAGAH,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,oBAIHH,EAAAC,EAAAC,cAAA,WAASC,UAAU,eACfL,GAEJE,EAAAC,EAAAC,cAAA,WAASC,UAAU,eACfJ,MCFEK,SAbF,SAAAP,GAAoD,IAAlDQ,EAAkDR,EAAlDQ,MAAOC,EAA2CT,EAA3CS,QAASC,EAAkCV,EAAlCU,eAAgBC,EAAkBX,EAAlBW,aAC7C,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SAASJ,MAAOA,EAAOK,SAAUF,EAC7CG,WAAYJ,EAAgBK,YAAY,2EACxCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBG,QAASA,GAAxC,mBCMSO,SAXA,SAAAhB,GAAa,IAAXQ,EAAWR,EAAXQ,MAEf,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWE,GACzBL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,UC4CSW,6MA9CbC,MAAM,CACJC,MAAQ,EACRC,UAAY,KAGdT,aAAe,SAACU,GACdC,EAAKC,SAAS,CACZJ,MAAME,EAAEG,OAAOhB,WAInBiB,SAAW,WACT,IAAIC,EAASJ,EAAKJ,MAAMC,MAAQ,OAChCG,EAAKC,SAAS,CACZJ,MAAQ,EACRC,UAAYM,EAAOC,QAAQ,QAI/BjB,eAAiB,SAACW,GACH,UAAVA,EAAEO,KACHN,EAAKG,oFAIA,IACAN,EAASU,KAAKX,MAAdC,MAELM,EAGEI,KAHFJ,SACAf,EAEEmB,KAFFnB,eACAC,EACEkB,KADFlB,aAEF,OACER,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyB,EAAD,CAAgB7B,KAAME,EAAAC,EAAAC,cAAC0B,EAAD,CACtBvB,MAAOW,EACPV,QAASgB,EACTf,eAAgBA,EAChBC,aAAcA,IAEdT,OAAQC,EAAAC,EAAAC,cAAC2B,EAAD,CAAQxB,MAAOqB,KAAKX,MAAME,sBAzCtBa,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d01bcc75.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ubdcalTemplate.css';\r\n\r\nconst ubdcalTemplate = ({form, result}) => {\r\n    return(\r\n        <main className=\"ubd-cal-template\">\r\n         <div className=\"title\">\r\n            엄복동 계산기\r\n         </div>\r\n         <section className=\"form-wrapper\">\r\n            <div className=\"disc\">\r\n            1 UBD = 172,212 \r\n            </div>\r\n         </section>\r\n         <section className=\"cal-wrapper\">\r\n            {form}\r\n         </section>\r\n         <section className=\"res=wrapper\">\r\n            {result}\r\n         </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default ubdcalTemplate;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = ({value, onClick, handleKeyPress, handleChange}) => { \r\n  return (\r\n    <div className=\"form\">\r\n      <input type=\"number\" value={value} onChange={handleChange} \r\n      onKeyPress={handleKeyPress} placeholder=\"변환할 숫자를 입력하세요..\"/>\r\n      <div className=\"create-button\" onClick={onClick}>\r\n        변환\r\n      </div>\r\n    </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css';\r\n\r\nconst Result = ({value}) => {\r\n\r\n  return (\r\n    <div className=\"form1\">\r\n      <h2> = </h2>\r\n      <h2 className=\"resultC\">{value}</h2>\r\n      <h2 className=\"UBD\">UBD</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport UbdcalTemplate from './components/ubdcalTemplate';\nimport Form from './components/Form';\nimport Result from './components/Result';\n\n\nclass App extends Component {\n  state={\n    input : 0,\n    resultNum : 0\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input:e.target.value // input의 다음 바뀔 값\n    });\n  }\n\n  transNum = () => {\n    let resNum = this.state.input / 172122;\n    this.setState({\n      input : 0,\n      resultNum : resNum.toFixed(3)\n    });\n  }\n  \n  handleKeyPress = (e) => {\n    if(e.key === 'Enter'){\n      this.transNum();\n    }\n  }\n\n  render() {\n    const {input} = this.state;\n    const{\n      transNum,\n      handleKeyPress,\n      handleChange\n    } = this;\n    return (\n      <div>\n      <UbdcalTemplate form={<Form\n      value={input} \n      onClick={transNum} \n      handleKeyPress={handleKeyPress}\n      handleChange={handleChange}\n      /> }\n      result={<Result value={this.state.resultNum}/>}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}